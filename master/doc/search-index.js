var searchIndex = JSON.parse('{\
"pyo3_asyncio":{"doc":"Rust Bindings to the Python Asyncio Event Loop","t":[0,0,5,5,5,0,0,5,5,5,5,5,23,0,5,23,5,8,16,16,8,8,5,10,5,5,10,10,3,3,11,11,11,11,11,11,11,11,11,11,11,5,12,5,11,11,12,5,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,23,0,5,23,5,0,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["async_std","generic","get_event_loop","into_future","run_forever","testing","tokio","try_close","try_init","with_runtime","into_coroutine","local_future_into_py","main","re_exports","run_until_complete","test","spawn_blocking","JoinError","JoinError","JoinHandle","Runtime","SpawnLocalExt","into_coroutine","is_panic","local_future_into_py","run_until_complete","spawn","spawn_local","Args","Test","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","from","from","into","into","main","name","parse_args","registry","task","test_fn","test_harness","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","get_runtime","init","init_current_thread","init_current_thread_once","init_multi_thread","init_multi_thread_once","into_coroutine","local_future_into_py","main","re_exports","run_until_complete","test","pending","runtime","Builder","EnterGuard","Handle","Runtime","block_on","block_on","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clone","clone_into","current","enable_all","enable_io","enable_time","enter","enter","fmt","fmt","fmt","fmt","from","from","from","from","handle","into","into","into","into","max_blocking_threads","new","new_current_thread","new_multi_thread","on_thread_start","on_thread_stop","shutdown_background","shutdown_timeout","spawn","spawn","spawn_blocking","spawn_blocking","thread_keep_alive","thread_name","thread_name_fn","thread_stack_size","to_owned","try_current","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","worker_threads"],"q":["pyo3_asyncio","","","","","","","","","","pyo3_asyncio::async_std","","","","","","pyo3_asyncio::async_std::re_exports","pyo3_asyncio::generic","","","","","","","","","","","pyo3_asyncio::testing","","","","","","","","","","","","","","","","","","","","","","","","","","","pyo3_asyncio::tokio","","","","","","","","","","","","pyo3_asyncio::tokio::re_exports","","pyo3_asyncio::tokio::re_exports::runtime","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["async-std-runtime PyO3 Asyncio functions specific to the …","Generic implementations of PyO3 Asyncio utilities that …","Get a reference to the Python Event Loop from Rust","Convert a Python <code>awaitable</code> into a Rust Future","Run the event loop forever","testing Utilities for writing PyO3 Asyncio tests","tokio-runtime PyO3 Asyncio functions specific to the …","Shutdown the event loops and perform any necessary cleanup","Attempt to initialize the Python and Rust event loops","Wraps the provided function with the initialization and …","Convert a Rust Future into a Python awaitable","Convert a <code>!Send</code> Rust Future into a Python awaitable","attributes Provides the boilerplate for the <code>async-std</code> …","attributes re-exports for macros","Run the event loop until the given Future completes","attributes testing Registers an <code>async-std</code> test with the …","re-export spawn_blocking for use in <code>#[test]</code> macro without …","Generic utilities for a JoinError","The error returned by a JoinHandle after being awaited","A future that completes with the result of the spawned …","Generic Rust async/await runtime","Extension trait for async/await runtimes that support …","Convert a Rust Future into a Python awaitable with a …","Check if the spawned task exited because of a panic","Convert a <code>!Send</code> Rust Future into a Python awaitable with …","Run the event loop until the given Future completes","Spawn a future onto this runtime’s event loop","Spawn a !Send future onto this runtime’s event loop","Args that should be provided to the test program","The structure used by the <code>#[test]</code> macros to provide a …","","","","","","","","","","","","Parses test arguments and passes the tests to the …","The fully qualified name of the test","Parse the test args from the command line","","Create the task that runs the test","The function used to create the task that runs the test.","Run a sequence of tests while applying any necessary …","","","","","","","","Get a reference to the current tokio runtime","Initialize the Tokio Runtime with a custom build","Initialize the Tokio Runtime with current-thread scheduler","Ensure that the Tokio Runtime is initialized","Initialize the Tokio Runtime with the multi-thread …","Ensure that the Tokio Runtime is initialized","Convert a Rust Future into a Python awaitable","Convert a <code>!Send</code> Rust Future into a Python awaitable","attributes","attributes re-exports for macros","Run the event loop until the given Future completes","attributes testing Registers a <code>tokio</code> test with the …","re-export pending to be used in tokio macros without …","re-export tokio::runtime to build runtimes in tokio …","Builds Tokio Runtime with custom configuration values.","Runtime context guard.","Handle to the runtime.","The Tokio runtime.","Run a future to completion on this <code>Handle</code>’s associated …","Run a future to completion on the Tokio runtime. This is …","","","","","","","","","Creates the configured <code>Runtime</code>.","","","Returns a <code>Handle</code> view over the currently running <code>Runtime</code>","Enables both I/O and time drivers.","Enables the I/O driver.","Enables the time driver.","Enter the runtime context. This allows you to construct …","Enter the runtime context.","","","","","","","","","Return a handle to the runtime’s spawner.","","","","","Specifies the limit for additional threads spawned by the …","Create a new runtime instance with default configuration …","Returns a new builder with the current thread scheduler …","Returns a new builder with the multi thread scheduler …","Executes function <code>f</code> after each thread is started but …","Executes function <code>f</code> before each thread stops.","Shutdown the runtime, without waiting for any spawned …","Shutdown the runtime, waiting for at most <code>duration</code> for …","Spawn a future onto the Tokio runtime.","Spawn a future onto the Tokio runtime.","Run the provided function on an executor dedicated to …","Run the provided function on an executor dedicated to …","Sets a custom timeout for a thread in the blocking pool.","Sets name of threads spawned by the <code>Runtime</code>’s thread …","Sets a function used to generate the name of threads …","Sets the stack size (in bytes) for worker threads.","","Returns a Handle view over the currently running Runtime","","","","","","","","","","","","","Sets the number of worker threads the <code>Runtime</code> will use."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,2,0,0,1,3,0,0,4,5,4,5,5,5,4,4,5,4,5,0,5,0,5,5,5,0,5,4,5,4,5,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,7,8,6,9,7,8,6,9,7,8,6,6,6,8,8,8,6,7,8,6,9,7,8,6,9,7,7,8,6,9,7,8,7,8,8,8,8,7,7,6,7,6,7,8,8,8,8,6,6,8,6,9,7,8,6,9,7,8,6,9,7,8],"f":[null,null,[[["python",3]],["pyany",3]],[[["pyany",3]],["pyresult",6]],[[["python",3]],["pyresult",6]],null,null,[[["python",3]],["pyresult",6]],[[["python",3]],["pyresult",6]],[[["python",3]],["pyresult",6]],[[["python",3]],[["pyresult",6],["pyobject",6]]],[[["python",3]],[["pyany",3],["pyresult",6]]],null,null,[[["python",3]],["pyresult",6]],null,[[],["joinhandle",3]],null,null,null,null,null,[[["python",3]],[["pyresult",6],["pyobject",6]]],[[],["bool",15]],[[["python",3]],[["pyany",3],["pyresult",6]]],[[["python",3]],["pyresult",6]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[],["test",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["args",3]],[[],["registry",3]],[[],[["pin",3],["box",3]]],null,[[["vec",3],["test",3],["args",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["runtime",3]],[[["runtime",3]]],[[]],[[]],[[]],[[]],[[["python",3]],[["pyresult",6],["pyobject",6]]],[[["python",3]],[["pyresult",6],["pyany",3]]],null,null,[[["python",3]],["pyresult",6]],null,[[],["pending",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4],["runtime",3],["error",3]]],[[],["handle",3]],[[]],[[],["handle",3]],[[],["builder",3]],[[],["builder",3]],[[],["builder",3]],[[],["enterguard",3]],[[],["enterguard",3]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],[[]],[[],["handle",3]],[[]],[[]],[[]],[[]],[[["usize",15]],["builder",3]],[[],[["result",4],["runtime",3],["error",3]]],[[],["builder",3]],[[],["builder",3]],[[],["builder",3]],[[],["builder",3]],[[]],[[["duration",3]]],[[],["joinhandle",3]],[[],["joinhandle",3]],[[],["joinhandle",3]],[[],["joinhandle",3]],[[["duration",3]],["builder",3]],[[],["builder",3]],[[],["builder",3]],[[["usize",15]],["builder",3]],[[]],[[],[["trycurrenterror",3],["result",4],["handle",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15]],["builder",3]]],"p":[[8,"Runtime"],[8,"JoinError"],[8,"SpawnLocalExt"],[3,"Args"],[3,"Test"],[3,"Handle"],[3,"Runtime"],[3,"Builder"],[3,"EnterGuard"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};