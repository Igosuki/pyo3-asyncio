var searchIndex = JSON.parse('{\
"pyo3_asyncio":{"doc":"Rust Bindings to the Python Asyncio Event Loop","i":[[5,"with_runtime","pyo3_asyncio","Wraps the provided function with the initialization and…",null,[[["python",3]],["pyresult",6]]],[5,"get_event_loop","","Get a reference to the Python Event Loop from Rust",null,[[["python",3]],["pyany",3]]],[5,"run_forever","","Run the event loop forever",null,[[["python",3]],["pyresult",6]]],[5,"into_future","","Convert a Python `awaitable` into a Rust Future",null,[[["pyany",3]],["pyresult",6]]],[0,"testing","","testing Utilities for writing PyO3 Asyncio tests",null,null],[3,"Args","pyo3_asyncio::testing","Args that should be provided to the test program",null,null],[3,"Test","","Wrapper around a test function or future to be passed to…",null,null],[5,"parse_args","","Parse the test args from the command line",null,[[],["args",3]]],[5,"test_harness","","Run a sequence of tests while applying any necessary…",null,[[["args",3],["test",3],["vec",3]]]],[11,"new_async","","Construct a test from a future",0,[[["string",3]]]],[0,"async_std","pyo3_asyncio","async-std-runtime PyO3 Asyncio functions specific to the…",null,null],[5,"run_until_complete","pyo3_asyncio::async_std","Run the event loop until the given Future completes",null,[[["python",3]],["pyresult",6]]],[5,"into_coroutine","","Convert a Rust Future into a Python coroutine",null,[[["python",3]],[["pyobject",6],["pyresult",6]]]],[0,"testing","","testing Testing Utilities for the async-std runtime.",null,null],[5,"new_sync_test","pyo3_asyncio::async_std::testing","Construct a test from a blocking function (like the…",null,[[["string",3]],["test",3]]],[5,"test_main","","Default main function for the async-std test harness.",null,[[["test",3],["vec",3]]]],[0,"tokio","pyo3_asyncio","tokio-runtime PyO3 Asyncio functions specific to the tokio…",null,null],[5,"init","pyo3_asyncio::tokio","Initialize the Tokio Runtime with a custom build",null,[[["runtime",3]]]],[5,"init_current_thread","","Initialize the Tokio Runtime with current-thread scheduler",null,[[]]],[5,"get_runtime","","Get a reference to the current tokio runtime",null,[[],["runtime",3]]],[5,"init_multi_thread","","Initialize the Tokio Runtime with the multi-thread scheduler",null,[[]]],[5,"run_until_complete","","Run the event loop until the given Future completes",null,[[["python",3]],["pyresult",6]]],[5,"into_coroutine","","Convert a Rust Future into a Python coroutine",null,[[["python",3]],[["pyobject",6],["pyresult",6]]]],[0,"testing","","testing Testing Utilities for the Tokio runtime.",null,null],[5,"new_sync_test","pyo3_asyncio::tokio::testing","Construct a test from a blocking function (like the…",null,[[["string",3]],["test",3]]],[5,"test_main","","Default main function for the test harness.",null,[[["test",3],["vec",3]]]],[0,"generic","pyo3_asyncio","Generic implementations of PyO3 Asyncio utilities that can…",null,null],[5,"run_until_complete","pyo3_asyncio::generic","Run the event loop until the given Future completes",null,[[["python",3]],["pyresult",6]]],[5,"into_coroutine","","Convert a Rust Future into a Python coroutine with a…",null,[[["python",3]],[["pyobject",6],["pyresult",6]]]],[0,"testing","","testing Testing utilities for generic runtimes.",null,null],[5,"test_main","pyo3_asyncio::generic::testing","Default main function for the generic test harness.",null,[[["test",3],["vec",3]]]],[8,"JoinError","pyo3_asyncio::generic","Generic utilities for a JoinError",null,null],[10,"is_panic","","Check if the spawned task exited because of a panic",1,[[]]],[8,"Runtime","","Generic Rust async/await runtime",null,null],[16,"JoinError","","The error returned by a JoinHandle after being awaited",2,null],[16,"JoinHandle","","A future that completes with the result of the spawned task",2,null],[10,"spawn","","Spawn a future onto this runtime\'s event loop",2,[[]]],[11,"from","pyo3_asyncio::testing","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"default","","",3,[[]]]],"p":[[3,"Test"],[8,"JoinError"],[8,"Runtime"],[3,"Args"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);