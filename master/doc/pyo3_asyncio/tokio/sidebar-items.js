initSidebarItems({"attr":[["main","attributes"],["test","attributes testing Registers a `tokio` test with the `pyo3-asyncio` test harness"]],"fn":[["cancellable_future_into_py","Convert a Rust Future into a Python awaitable"],["cancellable_future_into_py_with_loop","Convert a Rust Future into a Python awaitable"],["future_into_py","Convert a Rust Future into a Python awaitable"],["future_into_py_with_locals","Convert a Rust Future into a Python awaitable"],["future_into_py_with_loop","Convert a Rust Future into a Python awaitable"],["get_current_locals","Either copy the task locals from the current task OR get the current running loop and contextvars from Python."],["get_current_loop","Get the current event loop from either Python or Rust async task local context"],["get_runtime","Get a reference to the current tokio runtime"],["init","Initialize the Tokio runtime with a custom build"],["into_future","Convert a Python `awaitable` into a Rust Future"],["local_cancellable_future_into_py","Convert a `!Send` Rust Future into a Python awaitable"],["local_cancellable_future_into_py_with_loop","Convert a `!Send` Rust Future into a Python awaitable"],["local_future_into_py","Convert a `!Send` Rust Future into a Python awaitable"],["local_future_into_py_with_locals","Convert a `!Send` Rust Future into a Python awaitable"],["local_future_into_py_with_loop","Convert a `!Send` Rust Future into a Python awaitable"],["run","Run the event loop until the given Future completes"],["run_until_complete","Run the event loop until the given Future completes"],["scope","Set the task local event loop for the given future"],["scope_local","Set the task local event loop for the given !Send future"]],"mod":[["re_exports","attributes re-exports for macros"]]});